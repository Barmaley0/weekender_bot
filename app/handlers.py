import asyncio
import logging

from aiogram import Bot, F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, MaybeInaccessibleMessage, Message

import app.database.requests as req
import app.keyboards as kb

from app.states import DateUser


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router_user = Router()


async def safe_delete_message(message: MaybeInaccessibleMessage) -> bool:
    if not isinstance(message, Message):
        return False
    try:
        await message.delete()
        return True
    except TelegramBadRequest as e:
        if 'message to delete not found' not in str(e):
            try:
                await message.edit_reply_markup(reply_markup=None)
                return True
            except TelegramBadRequest:
                logger.error('Cloud not remove reply markup')
        return False
    except Exception as e:
        logger.error(f'Unexpected error deleting message: {e}')
        return False


async def send_events_list(message: Message, callback: CallbackQuery, events: list, bot: Bot) -> None:
    if callback.message is None:
        return
    chat_id = callback.message.chat.id
    logger.info(f'chat_id: {chat_id}')

    async def show_typing() -> None:
        await bot.send_chat_action(chat_id=chat_id, action='typing')

    if not events:
        await show_typing()
        await asyncio.sleep(1)
        await message.answer('‚è≥ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ú—ã —Å–æ–æ–±—â–∏–º –≤–∞–º, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ!')
        return

    for event in events:
        await show_typing()
        await asyncio.sleep(1)
        await message.answer(f'üéâ –í–æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—å—Å—è:\n{event.url}')


@router_user.message(CommandStart())
async def cmd_start(message: Message) -> None:
    if message.from_user is not None:
        await req.set_user(
            message.from_user.id,
            message.from_user.first_name,
            message.from_user.username,
        )
        await message.answer(
            f"""
<b>–ü—Ä–∏–≤–µ—Ç! {message.from_user.first_name} —Ç—ã –≤ —Ç—ë–ø–ª–æ–º –º–µ—Å—Ç–µ üå¥üåû</b>
–¢—É—Ç –º—ã –ø–æ–º–æ–≥–∞–µ–º –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–æ–±—ã—Ç–∏—è, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—á–µ—Ç—Å—è –∂–∏—Ç—å —á—É—Ç—å —è—Ä—á–µ, —Å–º–µ—è—Ç—å—Å—è —á—É—Ç—å –≥—Ä–æ–º—á–µ –∏ –æ–±–Ω–∏–º–∞—Ç—å—Å—è —á—É—Ç—å –∫—Ä–µ–ø—á–µ.

–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ ‚Äî –∏ —è –ø–æ–¥–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è —á—Ç–æ-—Ç–æ –ø–æ –≤–∫—É—Å—É.
–û—Ç –≤–µ—á–µ—Ä–∏–Ω–æ–∫ –¥–æ —É—é—Ç–Ω—ã—Ö –∞—Ä—Ç-–ª–µ–∫—Ü–∏–π.

–í –æ–±—â–µ–º, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –ß—É–≤—Å—Ç–≤—É–π —Å–µ–±—è –∫–∞–∫ –¥–æ–º–∞ (–Ω–æ —Å –º—É–∑—ã–∫–æ–π –ø–æ–ª—É—á—à–µ). üéß
            """,
            reply_markup=await kb.get_main_keyboard(),
            parse_mode='html',
        )
    else:
        await message.answer(
            """
<b>–ü—Ä–∏–≤–µ—Ç! –¢—ã –≤ —Ç—ë–ø–ª–æ–º –º–µ—Å—Ç–µ üå¥üåû</b>
–¢—É—Ç –º—ã –ø–æ–º–æ–≥–∞–µ–º –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–æ–±—ã—Ç–∏—è, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—á–µ—Ç—Å—è –∂–∏—Ç—å —á—É—Ç—å —è—Ä—á–µ, —Å–º–µ—è—Ç—å—Å—è —á—É—Ç—å –≥—Ä–æ–º—á–µ –∏ –æ–±–Ω–∏–º–∞—Ç—å—Å—è —á—É—Ç—å –∫—Ä–µ–ø—á–µ.

–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ ‚Äî –∏ —è –ø–æ–¥–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è —á—Ç–æ-—Ç–æ –ø–æ –≤–∫—É—Å—É.
–û—Ç –≤–µ—á–µ—Ä–∏–Ω–æ–∫ –¥–æ —É—é—Ç–Ω—ã—Ö –∞—Ä—Ç-–ª–µ–∫—Ü–∏–π.

–í –æ–±—â–µ–º, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –ß—É–≤—Å—Ç–≤—É–π —Å–µ–±—è –∫–∞–∫ –¥–æ–º–∞ (–Ω–æ —Å –º—É–∑—ã–∫–æ–π –ø–æ–ª—É—á—à–µ). üéß
            """,
            reply_markup=await kb.get_main_keyboard(),
            parse_mode='html',
        )


@router_user.message(F.text == 'üéâ –ù–∞—á–Ω—ë–º üéâ')
async def years_category(message: Message, state: FSMContext) -> None:
    await state.set_state(DateUser.year)
    await message.answer(
        """
<b>–î–∞–≤–∞–π —á—É—Ç—å –±–ª–∏–∂–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è</b>
–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? 
–≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø–æ–¥–∫–∏–Ω—É—Ç—å —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã ‚Äî —É –Ω–∞—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–≤–æ–∏ —Ç–æ—á–∫–∏ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è.
        """,
        reply_markup=await kb.categories_years(),
        parse_mode='html',
    )


@router_user.callback_query(F.data.startswith('category_'))
async def status_marital(callback: CallbackQuery, state: FSMContext) -> None:
    if callback.data is None or callback.message is None:
        return

    year_category = callback.data.split('_')[1]
    await state.update_data(year=year_category)
    await state.set_state(DateUser.status)
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é')

    await safe_delete_message(callback.message)

    if isinstance(callback.message, Message):
        await callback.message.answer(
            """
<b>–°–ø–∞—Å–∏–±–æ! –ß—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è —Ç–µ–±—è —Ñ–æ—Ä–º–∞—Ç, –ø–æ–¥—Å–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:</b>
–ö–∞–∫–æ–π —É —Ç–µ–±—è —Å–µ–º–µ–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å?
            """,
            reply_markup=await kb.marital_status(),
            parse_mode='html',
        )


@router_user.callback_query(F.data.startswith('status_'))
async def status_save(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    if callback.data is None or callback.message is None:
        return

    try:
        status_marital = callback.data.split('_')[1]
        await state.update_data(status=status_marital)
        data = await state.get_data()

        if data['year'] is not None and data['status'] is not None:
            await req.set_user_data_save(callback.from_user.id, data['year'], data['status'])
            await callback.answer('–§–∏–ª—å—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–±–æ—Ä–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –≤–∞—Å.')

        await safe_delete_message(callback.message)

        if isinstance(callback.message, Message):
            await callback.message.answer(
                """
<b>–ö–ª–∞—Å—Å, —Å–ø–∞—Å–∏–±–æ!</b>
–¢–µ–ø–µ—Ä—å –º—ã –∑–Ω–∞–µ–º —Ç–µ–±—è —á—É—Ç—å –ª—É—á—à–µ ‚Äî —Å–∞–º–æ–µ –≤—Ä–µ–º—è –ø–æ–¥–æ–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ.

–ù–µ –ø—Ä–æ—Å—Ç–æ —Å–æ–±—ã—Ç–∏–µ, –∞ —Ç–≤–æ—ë. –ì–¥–µ –º–æ–∂–Ω–æ –±—ã—Ç—å —Å–æ–±–æ–π, –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –∏, –≤–æ–∑–º–æ–∂–Ω–æ, —É–¥–∏–≤–∏—Ç—å—Å—è, –∫–∞–∫ —ç—Ç–æ –±—ã–ª–æ –Ω—É–∂–Ω–æ.

–ì–æ—Ç–æ–≤–∏–º –ø–æ–¥–±–æ—Ä–∫—É. –≠—Ç–æ –∑–∞–π–º—ë—Ç –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è.
            """,
                parse_mode='html',
            )
            events = await req.get_event_for_user(data['year'], data['status'])
            logger.info(f'Found events: {events}')
            await send_events_list(callback.message, callback, events, bot)
    except Exception as e:
        logger.error(f'Error in status_save: {e}')
        await callback.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
    finally:
        await state.clear()


@router_user.message(F.text == '–ú–µ–Ω—é üóÑÔ∏è')
async def question(message: Message) -> None:
    await message.answer(
        '<b>‚ûñ‚ûñ –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ûñ‚ûñ</b>',
        reply_markup=await kb.get_menu_keyboars(),
        parse_mode='html',
    )


@router_user.callback_query(F.data.startswith('check_'))
async def show_points_user(callback: CallbackQuery) -> None:
    if callback.data is None:
        await callback.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')
        return

    points = await req.get_user_points(callback.from_user.id)
    if isinstance(callback.message, Message):
        await callback.message.answer(
            f"""
<b>–£ –≤–∞—Å üîñ {points} –±–∞–ª–ª–æ–≤!</b>

–ü–æ—Å–µ—â–∞–π—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤ –∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.
–ß–µ–º –∞–∫—Ç–∏–≤–Ω–µ–µ –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ, —Ç–µ–º –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –Ω–∞ –≤–∞—à —Å—á–µ—Ç.

–í—ã –º–æ–∂–µ—Ç–µ —Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã –Ω–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å.
–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!
            """,
            parse_mode='html',
        )
        await callback.answer()
