import asyncio
import logging

from typing import Optional

from aiogram import Bot, F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, MaybeInaccessibleMessage, Message

import app.database.requests as req
import app.keyboards as kb

from app.states import UserData


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router_user = Router()


async def safe_delete_message(message: MaybeInaccessibleMessage) -> bool:
    if not isinstance(message, Message):
        logger.info('Message is not a Message object')
        return False
    try:
        await message.delete()
        logger.info(f'Deleted message: {message.message_id}, chat_id: {message.chat.id}')
        return True
    except TelegramBadRequest as e:
        error_message = str(e).lower()

        if 'message to delete not found' in error_message:
            logger.info(f'Message {message.message_id} already deleted')
            return True
        elif 'message is not modified' in error_message:
            logger.info(f'Message {message.message_id} has not changes')
            return True
        elif 'reply markup not modified' in error_message:
            try:
                await message.edit_reply_markup(reply_markup=None)
                return True
            except Exception as e:
                logger.info(f'Failed to delete message: {e}')
                return False
        else:
            logger.info(f'Failed to delete message {message.message_id}: {error_message}')
            return False


async def send_events_list(
    message: Message,
    events: list,
    bot: Bot,
    callback: Optional[CallbackQuery] = None,
) -> None:
    chat_id = message.chat.id
    logger.info(f'chat_id: {chat_id}')

    async def show_typing() -> None:
        await bot.send_chat_action(chat_id=chat_id, action='typing')

    if not events:
        await show_typing()
        await asyncio.sleep(1)
        await message.answer(
            """
‚è≥ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ú—ã —Å–æ–æ–±—â–∏–º, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ!

–ê –ø–æ–∫–∞ –º–æ–∂–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É @weekender_chat –∏ –ø–æ–∑–≤–∞—Ç—å —Ç—É–¥–∞ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π üíú
            """
        )
        return

    for event in events:
        await show_typing()
        await asyncio.sleep(1)
        event_message = f'{event.description if event.description else ""}\n\n{event.url}'

        await message.answer(event_message)


@router_user.message(CommandStart())
async def cmd_start(message: Message) -> None:
    if message.from_user:
        await req.set_user(
            message.from_user.id,
            message.from_user.first_name,
            message.from_user.username,
        )

        try:
            is_user_data = await req.user_data_exists(message.from_user.id)

            await message.answer(
                f"""
<b>–ü—Ä–∏–≤–µ—Ç, {f'{message.from_user.first_name}' if message.from_user.first_name else ''}! –¢—ã –≤ —Ç—ë–ø–ª–æ–º –º–µ—Å—Ç–µ üå¥</b>
–¢—É—Ç –º—ã –ø–æ–º–æ–≥–∞–µ–º –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–æ–±—ã—Ç–∏—è, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—á–µ—Ç—Å—è –∂–∏—Ç—å —á—É—Ç—å —è—Ä—á–µ, —Å–º–µ—è—Ç—å—Å—è —á—É—Ç—å –≥—Ä–æ–º—á–µ –∏ –æ–±–Ω–∏–º–∞—Ç—å—Å—è —á—É—Ç—å –∫—Ä–µ–ø—á–µ.

–û—Ç –≤–µ—á–µ—Ä–∏–Ω–æ–∫ –¥–æ —É—é—Ç–Ω—ã—Ö –∞—Ä—Ç-–ª–µ–∫—Ü–∏–π ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ –∏ —è –ø–æ–¥–±–µ—Ä—É —Ç–µ–±–µ —á—Ç–æ-—Ç–æ –ø–æ –≤–∫—É—Å—É.

üéÅ –ß–µ–º –∞–∫—Ç–∏–≤–Ω–µ–µ —Ç—ã ‚Äî —Ç–µ–º –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤ –ø–æ–ª—É—á–∞–µ—à—å. –ü–æ—Ç–æ–º –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É, –∞–ø–Ω—É—Ç—å—Å—è –¥–æ —É—Ä–æ–≤–Ω—è "–ì—É—Ä—É –≤–∞–π–±–∞" –∏–ª–∏ –¥–∞–∂–µ —Å—Ç–∞—Ç—å –Ω–∞—à–∏–º –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–º –∏ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏—è—Ç–Ω—ã–µ –±–æ–Ω—É—Å—ã.

üíú –ê –µ—â—ë —É –Ω–∞—Å –µ—Å—Ç—å —á–∞—Ç @weekender_chat, –≥–¥–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π, –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –ø–æ–π—Ç–∏ –≤–º–µ—Å—Ç–µ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –∏ –ø—Ä–æ—Å—Ç–æ –±—ã—Ç—å —Å–æ–±–æ–π. –ü–æ—Ç–æ–º—É —á—Ç–æ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ ‚Äî –≤—Å–µ–≥–¥–∞ –ª–µ–≥—á–µ –¥—ã—à–∏—Ç—Å—è. –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —á–∞—Ç –∏ –ø–æ–ª—É—á–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ 100 –±–∞–ª–ª–æ–≤.

–ß—É–≤—Å—Ç–≤—É–π —Å–µ–±—è –∫–∞–∫ –¥–æ–º–∞. –ó–¥–µ—Å—å —Ç–µ–±—è –∂–¥—É—Ç.
            """,
                reply_markup=await kb.get_main_kb(user_data_exists=is_user_data),
                parse_mode='html',
            )
        except Exception as e:
            logger.error(f'Errof checking user data: {e}')


@router_user.message(F.photo)
async def photo(message: Message) -> None:
    try:
        if not message.photo:
            await message.answer('‚ùå —Ñ–æ—Ç–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!')
            return
        file_id_s = message.photo[-1].file_id
        await message.answer_photo(
            file_id_s,
            caption='–í–æ—Ç —Ç–≤–æ—è —Ñ–æ—Ç–∫–∞',
        )
        await message.answer(f'id —Ñ–æ—Ç–∫–∏: {file_id_s}')
    except Exception as e:
        logger.error(f'Error in photo handler: {e}')
        await message.answer('‚ùå –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')


@router_user.message(F.text.in_(['üéâ –ù–∞—á–Ω—ë–º üéâ', 'üîÄ–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É']))
async def get_year(message: Message, state: FSMContext) -> None:
    if message.from_user is None or message.from_user.id is None:
        return
    user_data = await req.get_user_data(message.from_user.id)

    await state.set_data(
        {
            'year': user_data.get('year'),
            'gender': user_data.get('gender'),
            'status': user_data.get('status'),
            'district': user_data.get('district'),
            'interests': user_data.get('interests', []),
            'shown_events': user_data.get('shown_events', []),
        }
    )

    await state.update_data(shown_events=[])
    await state.set_state(UserData.year)
    await message.answer(
        """
<b>–î–∞–≤–∞–π —á—É—Ç—å –±–ª–∏–∂–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è.</b>
–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? 
–≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø–æ–¥–∫–∏–Ω—É—Ç—å —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã.
        """,
        parse_mode='html',
    )


@router_user.message(UserData.year)
async def get_status(message: Message, state: FSMContext) -> None:
    if message.text is None or message.text.isalpha():
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Ü–∏—Ñ—Ä–∞–º–∏')
        return

    if not message.text.isdigit() and not message.text.isnumeric():
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Ü–∏—Ñ—Ä–∞–º–∏')
        return

    age = int(message.text)

    if age < 18 or age > 60:
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 18 –¥–æ 60 –ª–µ—Ç')
        return

    data = await state.update_data(year=age)
    if not data.get('year'):
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç', show_alert=True)
        return
    await state.set_state(UserData.gender)

    if isinstance(message, Message):
        await message.answer(
            """
<b>–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –ø–æ–ª:</b>
            """,
            reply_markup=await kb.gender_kb(state=state),
            parse_mode='html',
        )


@router_user.callback_query(F.data.startswith('gender_'))
async def get_gender(callback: CallbackQuery, state: FSMContext) -> None:
    if callback.data is None or callback.message is None:
        return

    if isinstance(callback.message, Message):
        try:
            gender = callback.data.split('_')[1]
            data = await state.get_data()

            current_gender = data.get('gender')
            new_gender = None if current_gender == gender else gender
            await state.update_data(gender=new_gender)

            await callback.message.edit_reply_markup(reply_markup=await kb.gender_kb(state=state))

            await callback.answer(f'–ü–æ–ª: {gender if new_gender else "—Å–±—Ä–æ—à–µ–Ω"}')

            if new_gender:
                await state.set_state(UserData.status)
                await callback.message.answer(
                    """
<b>–°–ø–∞—Å–∏–±–æ! –ß—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è —Ç–µ–±—è —Ñ–æ—Ä–º–∞—Ç, –ø–æ–¥—Å–∫–∞–∂–∏:</b>
–ö–∞–∫–æ–π —É —Ç–µ–±—è —Å–µ–º–µ–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å?
                    """,
                    reply_markup=await kb.marital_status_kb(state=state),
                    parse_mode='html',
                )
        except Exception as e:
            logger.error(e)
            await callback.answer('‚ùå –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')


@router_user.callback_query(F.data.startswith('status_'))
async def get_district(callback: CallbackQuery, state: FSMContext) -> None:
    if callback.data is None or callback.message is None:
        return

    if isinstance(callback.message, Message):
        try:
            status_marital = callback.data.split('_')[1]
            data = await state.get_data()

            current_status = data.get('status')
            new_status = None if current_status == status_marital else status_marital
            await state.update_data(status=new_status)

            await callback.message.edit_reply_markup(reply_markup=await kb.marital_status_kb(state=state))

            await callback.answer(f'–°—Ç–∞—Ç—É—Å: {status_marital if new_status else "—Å–±—Ä–æ—à–µ–Ω"}')

            if new_status:
                await state.set_state(UserData.district)
                await callback.message.answer(
                    """
<b>–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —É—Ç–æ—á–Ω–∏–º –ª–æ–∫–∞—Ü–∏—é:</b>
–í –∫–∞–∫–æ–º –æ–∫—Ä—É–≥–µ –ú–æ—Å–∫–≤—ã —Ç—ã –∂–∏–≤–µ—à—å?
                    """,
                    reply_markup=await kb.district_kb(state=state),
                    parse_mode='html',
                )
        except Exception as e:
            logger.error(e)
            await callback.answer('‚ùå –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')


@router_user.callback_query(F.data.startswith('district_'))
async def get_interests(callback: CallbackQuery, state: FSMContext) -> None:
    if callback.data is None or callback.message is None:
        return

    if isinstance(callback.message, Message):
        try:
            district_name = callback.data.split('_')[1]
            data = await state.get_data()

            current_district = data.get('district')
            new_district = None if current_district == district_name else district_name
            await state.update_data(district=new_district)

            await callback.message.edit_reply_markup(reply_markup=await kb.district_kb(state=state))
            await callback.answer(f'–†–∞–∏ÃÜ–æ–Ω: {district_name if new_district else "—Å–±—Ä–æ—à–µ—Ç"}')

            if new_district:
                await state.set_state(UserData.interests)
                await callback.message.answer(
                    """
<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ.</b>
–í—ã–±–µ—Ä–∏ –æ—Ç 3 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–∫–ª–∏–∫–∞—é—Ç—Å—è:
                    """,
                    reply_markup=await kb.interests_kb(state=state),
                    parse_mode='html',
                )
        except Exception as e:
            logger.error(e)
            await callback.answer('‚ùå –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')


@router_user.callback_query(F.data.startswith('interests_') & (F.data != 'interests_done'))
async def get_save(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    if callback.data is None or callback.message is None:
        await callback.answer('‚ùå –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')
        return

    try:
        interests = callback.data.split('_')[1]
        data = await state.get_data()
        logger.info(f'Updated district -> interests: {data}')

        current_interests = data.get('interests', [])
        if isinstance(current_interests, str):
            current_interests = [current_interests] if current_interests else []

        updated_interests = (
            [item for item in current_interests if item != interests]
            if interests in current_interests
            else [*current_interests, interests]
        )

        await state.update_data(interests=updated_interests)

        updated_data = await state.get_data()
        logger.info(f'Updated interests: {updated_data}')

        try:
            if isinstance(callback.message, Message):
                await callback.message.edit_reply_markup(reply_markup=await kb.interests_kb(state=state))
                await callback.answer(f'–ò–Ω—Ç–µ—Ä–µ—Å: {interests if interests in updated_interests else "—Å–±—Ä–æ—à–µ–Ω"}')
            else:
                await bot.send_message(
                    chat_id=callback.from_user.id,
                    text='–û–±–Ω–æ–≤–∏—Ç–µ –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤',
                    reply_markup=await kb.interests_kb(state=state),
                )
        except TelegramBadRequest as e:
            if 'message is not modified' not in str(e):
                logger.error(f'Failed to update message: {e}')
                await callback.answer('‚ùå –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!', show_alert=True)
    except Exception as e:
        logger.error(e)
        await callback.answer('‚ùå –û—à–±–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')


@router_user.callback_query(F.data == 'interests_done')
async def save_data(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    try:
        if not callback.message:
            logger.error('callback.message is None')
            await callback.answer('‚ùå –û—à–∏–±–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', show_alert=True)
            return

        data = await state.get_data()
        logger.info(f'Current state data: {data}')

        required_fields = ['year', 'gender', 'status', 'district']
        if not all(field in data for field in required_fields):
            logger.error(f'Missing required fields: {required_fields}')
            await callback.answer('‚ùå –ù–∞–∂–º–∏—Ç–µ —Å–Ω–æ–≤–∞ –∫–Ω–æ–ø–∫—É\n\t"üéâ –ù–∞—á–Ω—ë–º üéâ"!', show_alert=True)
            return

        if not data['interests']:
            logger.error('No interests selected')
            await callback.answer('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å!', show_alert=True)
            return

        logger.info(f'Saving user data: {data}')

        try:
            await req.set_user_data_save(
                tg_id=callback.from_user.id,
                year=data['year'],
                gender=data['gender'],
                status=data['status'],
                district=data['district'],
                interests=data['interests'],
            )
            logger.info('Data saved successfully')
        except Exception as e:
            logger.error(f'Failed to save data: {e}')
            await callback.answer('‚ùå –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!', show_alert=True)
            return

        await callback.answer('‚úÖ –§–∏–ª—å—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω')

        ia_user_data = await req.get_user(callback.from_user.id)
        logger.info(f'IA user data: {ia_user_data}')

        if isinstance(callback.message, Message):
            message = await callback.message.answer(
                """
<b>–ö–ª–∞—Å—Å, —Å–ø–∞—Å–∏–±–æ!</b>
–¢–µ–ø–µ—Ä—å –º—ã –∑–Ω–∞–µ–º —Ç–µ–±—è —á—É—Ç—å –ª—É—á—à–µ ‚Äî —Å–∞–º–æ–µ –≤—Ä–µ–º—è –ø–æ–¥–æ–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ.

–ì–æ—Ç–æ–≤–∏–º –ø–æ–¥–±–æ—Ä–∫—É. –≠—Ç–æ –∑–∞–π–º—ë—Ç –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è.
            """,
                reply_markup=await kb.get_main_kb(user_data_exists=True),
                parse_mode='html',
            )
            try:
                user = await req.get_user(callback.from_user.id)
                if not user:
                    raise ValueError('User not found')

                events = await req.get_recommended_events(tg_id=callback.from_user.id, limit=3)
                logger.info(f'Found events: {events}')

                new_shown_events = [event.id for event in events]
                await state.update_data(shown_events=new_shown_events)

                await send_events_list(message, events, bot, callback)
            except Exception as e:
                logger.error(f'Error in send_events_list: {e}', exc_info=True)
                await callback.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')

    except Exception as e:
        logger.error(f'Error in status_save: {e}', exc_info=True)
        await callback.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
    finally:
        data = await state.get_data()
        shown_events = data.get('shown_events', [])
        await state.clear()
        await state.update_data(shown_events=shown_events)


@router_user.message(F.text == '–ú–µ–Ω—é üóÑÔ∏è')
async def question(message: Message) -> None:
    await message.answer(
        '<b>‚ûñ‚ûñ –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ûñ‚ûñ</b>',
        reply_markup=await kb.get_menu_kb(),
        parse_mode='html',
    )


@router_user.callback_query(F.data.startswith('check_'))
async def show_points_user(callback: CallbackQuery) -> None:
    if callback.data is None:
        await callback.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')
        return
    points = await req.get_user_points(callback.from_user.id)

    if isinstance(callback.message, Message):
        await callback.message.answer(
            f"""
–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {points} –±–∞–ª–ª–æ–≤! üéâ

–ö–∞–∂–¥—ã–π –±–∞–ª–ª ‚Äî —ç—Ç–æ —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏! –ö–æ–ø–∏ –±–æ–ª—å—à–µ –∏ –æ–ø–ª–∞—á–∏–≤–∞–π –¥–æ 50% —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ª—é–±–æ–≥–æ –±–∏–ª–µ—Ç–∞ –≤ Weekender.

–°–æ–≤–µ—Ç: –∞–∫—Ç–∏–≤–Ω–∏—á–∞–π –≤ —á–∞—Ç–µ @weekender_chat, –∑–æ–≤–∏ –¥—Ä—É–∑–µ–π –∏ –¥–µ–ª–∏—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ ‚Äî –±–∞–ª–ª—ã —Å–∞–º–∏ –ø—Ä–∏–±–µ–≥—É—Ç –∫ —Ç–µ–±–µ! üöÄ

–î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –±–∞–ª–ª–æ–≤ –Ω–∞–ø–∏—à–∏ –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @weekender_main
            """
        )

    # file_id_local = 'AgACAgIAAxkBAAINjmgvg4lmVL30AQoeuUUxbCOwJDXzAAKm8DEbEbh4SdXXtBL6heUeAQADAgADeQADNgQ'
    file_id = 'AgACAgIAAxkBAAIEvWg28Q7DqYKRGRYI3lJLei_8NnXvAAKN8zEb2I25SZGgKqeEEXsZAQADAgADeQADNgQ'

    if isinstance(callback.message, Message):
        try:
            await callback.message.answer_photo(
                file_id,
            )

            await callback.message.answer(
                """
    üéØ –ú–µ—Ö–∞–Ω–∏–∫–∞ –æ–±–º–µ–Ω–∞ –±–∞–ª–ª–æ–≤
1. 1 –±–∞–ª–ª = 1 —Ä—É–±.
2. –ë–∞–ª–ª–∞–º–∏ –º–æ–∂–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –¥–æ 50% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è;
3. –ë–∞–ª–ª—ã —Å–≥–æ—Ä–∞—é—Ç —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞.
                """,
                parse_mode='html',
            )
            await callback.answer()

        except Exception as e:
            logger.error(f'Error in show_points_user: {e}', exc_info=True)
            await callback.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')


@router_user.message(F.text == 'üîÑÔ∏è–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É')
async def repeat_recommendations(message: Message, state: FSMContext, bot: Bot) -> None:
    if message.from_user is None:
        return
    data = await state.get_data()
    shown_events = data.get('shown_events', [])  # –°–ø–∏—Å–æ–∫ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö ID

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∏—Å–∫–ª—é—á–∞—è –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ
        events = await req.get_recommended_events_new(tg_id=message.from_user.id, limit=3, exclude_ids=shown_events)

        if not events:
            await message.answer("""
            ‚ú® –í—ã —É–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!
    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –∑–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µüïë. ‚ú®
            """)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö ID
        new_shown_events = shown_events + [event.id for event in events]
        await state.update_data(shown_events=new_shown_events)

        await send_events_list(message, events, bot)
    except Exception as e:
        logger.error(f'Error in repeat_recommendations: {e}', exc_info=True)
        await message.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
