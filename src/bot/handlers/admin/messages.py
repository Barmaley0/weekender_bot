import logging

from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

import src.bot.db.repositories.support_repository as req_support
import src.bot.keyboards.builders as kb

from src.bot.db.repositories.admin_repository import is_admin
from src.bot.fsm.admin_states import AdminChatState


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router_admin = Router()


@router_admin.message(F.text == 'ü™™')
async def show_admin_menu(message: Message) -> None:
    await message.answer(
        '<b>‚ûñ‚ûñ  –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞  ‚ûñ‚ûñ</b>', reply_markup=await kb.get_admin_menu_kb(), parse_mode='html'
    )


@router_admin.message(AdminChatState.waiting_for_reply)
async def process_admin_reply(message: Message, state: FSMContext, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not message.text or not message.from_user:
        await message.answer('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç')
        return

    if message.bot is None:
        logger.error('‚ùóBot instance is not available')
        await message.answer('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞')
        return

    if not await is_admin(message.from_user.id):
        logger.info(f'‚ùóUser {message.from_user.id} is not admin!')
        await message.answer('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!', show_alert=True)
        return
    data = await state.get_data()
    ticket_id = data.get('current_ticket_id')

    if not ticket_id:
        await message.answer('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç')
        await state.clear()
        return

    ticket = await req_support.get_ticket_by_id(ticket_id)
    logger.info(f'‚û°Ô∏è Admin {message.from_user.id} wants to send a message to {ticket.id}')
    if not ticket or not ticket.is_active:
        await message.answer('‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç.')
        await state.clear()
        return

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
        await req_support.add_message_to_ticket(ticket_id=ticket_id, text=message.text, is_from_user=False)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.bot.send_message(
            chat_id=ticket.user.tg_id,
            text=f'üü£ Weekender:\n{message.text}',
            disable_notification=False,
        )

        await message.answer('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}')
        await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç')
    finally:
        await state.clear()
