import logging
import os

from aiogram import Bot, F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from dotenv import load_dotenv

import src.bot.db.repositories.event_repository as req_event
import src.bot.db.repositories.user_repository as req_user
import src.bot.keyboards.builders as kb

from src.bot.fsm.user_states import UserData
from src.bot.utils.helpers import data_get_update, send_events_list


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router_user = Router()


@router_user.callback_query(F.data.startswith('gender_'))
async def get_gender(callback: CallbackQuery, state: FSMContext) -> None:
    if isinstance(callback.message, Message):
        try:
            result = await data_get_update(callback, state, 'gender')

            if result is None:
                return

            gender, new_gender = result

            await state.update_data(gender=new_gender)

            await callback.message.edit_reply_markup(reply_markup=await kb.gender_kb(state=state))

            await callback.answer(f'–ü–æ–ª: {gender if new_gender else "—Å–±—Ä–æ—à–µ–Ω"}')

            if new_gender:
                await state.set_state(UserData.status)
                await callback.message.answer(
                    """
<b>–°–ø–∞—Å–∏–±–æ! –ß—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è —Ç–µ–±—è —Ñ–æ—Ä–º–∞—Ç, –ø–æ–¥—Å–∫–∞–∂–∏:</b>
–ö–∞–∫–æ–π —É —Ç–µ–±—è —Å–µ–º–µ–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å?
                    """,
                    reply_markup=await kb.marital_status_kb(state=state),
                    parse_mode='html',
                )
        except Exception as e:
            logger.error(e)
            await callback.answer('‚ùå –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')


@router_user.callback_query(F.data.startswith('status_'))
async def get_district(callback: CallbackQuery, state: FSMContext) -> None:
    if isinstance(callback.message, Message):
        try:
            result = await data_get_update(callback, state, 'status')

            if result is None:
                return

            status_marital, new_status = result

            await state.update_data(status=new_status)

            await callback.message.edit_reply_markup(reply_markup=await kb.marital_status_kb(state=state))

            await callback.answer(f'–°—Ç–∞—Ç—É—Å: {status_marital if new_status else "—Å–±—Ä–æ—à–µ–Ω"}')

            if new_status:
                await state.set_state(UserData.district)
                await callback.message.answer(
                    """
<b>–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —É—Ç–æ—á–Ω–∏–º –ª–æ–∫–∞—Ü–∏—é:</b>
–í –∫–∞–∫–æ–º –æ–∫—Ä—É–≥–µ –ú–æ—Å–∫–≤—ã —Ç—ã –∂–∏–≤–µ—à—å?
                    """,
                    reply_markup=await kb.district_kb(state=state),
                    parse_mode='html',
                )
        except Exception as e:
            logger.error(e)
            await callback.answer('‚ùå –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')


@router_user.callback_query(F.data.startswith('district_'))
async def get_interests(callback: CallbackQuery, state: FSMContext) -> None:
    if isinstance(callback.message, Message):
        try:
            result = await data_get_update(callback, state, 'district')

            if result is None:
                return

            district_name, new_district = result

            await state.update_data(district=new_district)

            await callback.message.edit_reply_markup(reply_markup=await kb.district_kb(state=state))

            await callback.answer(f'–†–∞–∏ÃÜ–æ–Ω: {district_name if new_district else "—Å–±—Ä–æ—à–µ—Ç"}')

            if new_district:
                await state.set_state(UserData.interests)
                await callback.message.answer(
                    """
<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ.</b>
–í—ã–±–µ—Ä–∏ –æ—Ç 3 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–∫–ª–∏–∫–∞—é—Ç—Å—è:
                    """,
                    reply_markup=await kb.interests_kb(state=state),
                    parse_mode='html',
                )
        except Exception as e:
            logger.error(e)
            await callback.answer('‚ùå –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')


@router_user.callback_query(F.data.startswith('interests_') & (F.data != 'interests_done'))
async def get_save(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    if callback.data is None or callback.message is None:
        await callback.answer('‚ùå –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')
        return

    try:
        interests = callback.data.split('_')[1]
        data = await state.get_data()
        logger.info(f'Updated district -> interests: {data}')

        current_interests = data.get('interests', [])
        if isinstance(current_interests, str):
            current_interests = [current_interests] if current_interests else []

        updated_interests = (
            [item for item in current_interests if item != interests]
            if interests in current_interests
            else [*current_interests, interests]
        )

        await state.update_data(interests=updated_interests)

        updated_data = await state.get_data()
        logger.info(f'Updated interests: {updated_data}')

        try:
            if isinstance(callback.message, Message):
                await callback.message.edit_reply_markup(reply_markup=await kb.interests_kb(state=state))
                await callback.answer(f'–ò–Ω—Ç–µ—Ä–µ—Å: {interests if interests in updated_interests else "—Å–±—Ä–æ—à–µ–Ω"}')
            else:
                await bot.send_message(
                    chat_id=callback.from_user.id,
                    text='–û–±–Ω–æ–≤–∏—Ç–µ –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤',
                    reply_markup=await kb.interests_kb(state=state),
                )
        except TelegramBadRequest as e:
            if 'message is not modified' not in str(e):
                logger.error(f'Failed to update message: {e}')
                await callback.answer('‚ùå –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!', show_alert=True)
    except Exception as e:
        logger.error(e)
        await callback.answer('‚ùå –û—à–±–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')


@router_user.callback_query(F.data == 'interests_done')
async def save_data(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    try:
        if not callback.message:
            logger.error('callback.message is None')
            await callback.answer('‚ùå –û—à–∏–±–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', show_alert=True)
            return

        data = await state.get_data()
        logger.info(f'Current state data: {data}')

        required_fields = ['year', 'gender', 'status', 'district']
        if not all(field in data for field in required_fields):
            logger.error(f'Missing required fields: {required_fields}')
            await callback.answer('‚ùå –ù–∞–∂–º–∏—Ç–µ —Å–Ω–æ–≤–∞ –∫–Ω–æ–ø–∫—É\n\t"üéâ –ù–∞—á–Ω—ë–º üéâ"!', show_alert=True)
            return

        if not data['interests']:
            logger.error('No interests selected')
            await callback.answer('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å!', show_alert=True)
            return

        logger.info(f'Saving user data: {data}')

        try:
            await req_user.set_user_data_save(
                tg_id=callback.from_user.id,
                year=data['year'],
                gender=data['gender'],
                status=data['status'],
                district=data['district'],
                interests=data['interests'],
            )
            logger.info('Data saved successfully')
        except Exception as e:
            logger.error(f'Failed to save data: {e}')
            await callback.answer('‚ùå –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!', show_alert=True)
            return

        await callback.answer('‚úÖ –§–∏–ª—å—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω')

        ia_user_data = await req_user.get_user(callback.from_user.id)
        logger.info(f'IA user data: {ia_user_data}')

        if isinstance(callback.message, Message):
            message = await callback.message.answer(
                """
<b>–ö–ª–∞—Å—Å, —Å–ø–∞—Å–∏–±–æ!</b>
–¢–µ–ø–µ—Ä—å –º—ã –∑–Ω–∞–µ–º —Ç–µ–±—è —á—É—Ç—å –ª—É—á—à–µ ‚Äî —Å–∞–º–æ–µ –≤—Ä–µ–º—è –ø–æ–¥–æ–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ.

–ì–æ—Ç–æ–≤–∏–º –ø–æ–¥–±–æ—Ä–∫—É. –≠—Ç–æ –∑–∞–π–º—ë—Ç –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è.
            """,
                reply_markup=await kb.get_main_kb(user_data_exists=True),
                parse_mode='html',
            )
            try:
                user = await req_user.get_user(callback.from_user.id)
                if not user:
                    raise ValueError('User not found')

                events = await req_event.get_recommended_events(tg_id=callback.from_user.id, limit=3)
                logger.info(f'Found events: {events}')

                new_shown_events = [event.id for event in events]
                await state.update_data(shown_events=new_shown_events)

                await send_events_list(message, events, bot, callback)
            except Exception as e:
                logger.error(f'Error in send_events_list: {e}', exc_info=True)
                await callback.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')

    except Exception as e:
        logger.error(f'Error in status_save: {e}', exc_info=True)
        await callback.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
    finally:
        data = await state.get_data()
        shown_events = data.get('shown_events', [])
        await state.clear()
        await state.update_data(shown_events=shown_events)
        logger.info(f'Updated shown events in state save: {shown_events}')


@router_user.callback_query(F.data.startswith('check_'))
async def show_points_user(callback: CallbackQuery) -> None:
    if callback.data is None:
        await callback.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')
        return
    points = await req_user.get_user_points(callback.from_user.id)

    if isinstance(callback.message, Message):
        await callback.message.answer(
            f"""
–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {points} –±–∞–ª–ª–æ–≤! üéâ

–ö–∞–∂–¥—ã–π –±–∞–ª–ª ‚Äî —ç—Ç–æ —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏! –ö–æ–ø–∏ –±–æ–ª—å—à–µ –∏ –æ–ø–ª–∞—á–∏–≤–∞–π –¥–æ 50% —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ª—é–±–æ–≥–æ –±–∏–ª–µ—Ç–∞ –≤ Weekender.

–°–æ–≤–µ—Ç: –∞–∫—Ç–∏–≤–Ω–∏—á–∞–π –≤ —á–∞—Ç–µ @weekender_chat, –∑–æ–≤–∏ –¥—Ä—É–∑–µ–π –∏ –¥–µ–ª–∏—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ ‚Äî –±–∞–ª–ª—ã —Å–∞–º–∏ –ø—Ä–∏–±–µ–≥—É—Ç –∫ —Ç–µ–±–µ! üöÄ

–î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –±–∞–ª–ª–æ–≤ –Ω–∞–ø–∏—à–∏ –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @weekender_main
            """
        )

    load_dotenv()
    file_id = os.getenv('POINTS_IMAGE_ID')
    if file_id is None:
        raise ValueError('error file_id')

    if isinstance(callback.message, Message):
        try:
            await callback.message.answer_photo(
                file_id,
            )

            await callback.message.answer(
                """
    üéØ –ú–µ—Ö–∞–Ω–∏–∫–∞ –æ–±–º–µ–Ω–∞ –±–∞–ª–ª–æ–≤
1. 1 –±–∞–ª–ª = 1 —Ä—É–±.
2. –ë–∞–ª–ª–∞–º–∏ –º–æ–∂–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –¥–æ 50% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è;
3. –ë–∞–ª–ª—ã —Å–≥–æ—Ä–∞—é—Ç —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞.
                """,
                parse_mode='html',
            )
            await callback.answer()

        except Exception as e:
            logger.error(f'Error in show_points_user: {e}', exc_info=True)
            await callback.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
