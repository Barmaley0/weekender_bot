import logging
import os

from aiogram import F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from dotenv import load_dotenv

import src.bot.db.repositories.admin_repository as req_admin
import src.bot.db.repositories.support_repository as req_support
import src.bot.db.repositories.user_repository as req_user
import src.bot.keyboards.builders as kb

from src.bot.fsm.user_states import PeopleSearch, UserData
from src.bot.utils.user_helpers import show_user_profile, start_events_list


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router_user = Router()

MAIN_MENU_BUTTONS = {'–†–µ–∑–∏–¥–µ–Ω—Ç—ã', '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', '–ë–∞–ª–ª—ã', '–ß–∞—Ç', 'ü™™', 'üéâ –ù–∞—á–Ω—ë–º üéâ'}

# @router_user.message(F.photo)
# async def photo(message: Message) -> None:
#     try:
#         if not message.photo:
#             await message.answer('‚ùå —Ñ–æ—Ç–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!')
#             return
#         file_id_s = message.photo[-1].file_id
#         await message.answer_photo(
#             file_id_s,
#             caption='–í–æ—Ç —Ç–≤–æ—è —Ñ–æ—Ç–∫–∞',
#         )
#         await message.answer(f'id —Ñ–æ—Ç–∫–∏: {file_id_s}')
#     except Exception as e:
#         logger.error(f'Error in photo handler: {e}')
# == True         await message.answer('‚ùå –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')


@router_user.message(F.text & ~F.text.in_(MAIN_MENU_BUTTONS))
async def user_message_to_support(message: Message) -> None:
    if not message.text or not message.from_user or not message.bot:
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç')
        return

    if await req_admin.is_admin(message.from_user.id):
        await message.answer('‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ!')
        return

    user = await req_user.get_user(tg_id=message.from_user.id)
    if not user:
        await message.answer('‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!')
        return

    ticket = await req_support.get_active_ticket_for_user(tg_id=message.from_user.id)
    logger.info(f'‚û°Ô∏è User {message.from_user.id} wants to send a message to support {ticket}')
    if not ticket:
        ticket = await req_support.create_support_ticket(tg_id=message.from_user.id)
        logger.info(f'‚û°Ô∏è Created a new support ticket for user: {message.from_user.id} ticket: {ticket.id}')

    await req_support.add_message_to_ticket(
        ticket_id=ticket.id,
        text=message.text,
        is_from_user=True,
    )

    admins = await req_admin.get_all_admin()
    logger.info(f'‚û°Ô∏è Sending message to {len(admins)} admins list: {admins}')
    for admin_id in admins:
        try:
            await message.bot.send_message(
                chat_id=admin_id,
                text=f"""
                –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
<b> üë§ {message.from_user.first_name}</b>
<b> üìß {message.from_user.username}</b>
<b> üÜî {message.from_user.id}</b>
<b> üì® –¢–µ–∫—Å—Ç:</b> {message.text}
                """,
                reply_markup=await kb.get_admin_reply_message_kb(ticket_id=ticket.id),
                parse_mode='html',
                disable_notification=False,
            )
        except Exception as e:
            logger.error(f'‚ùóFailed to send message to admin {admin_id}: {e}')

    messages = await req_support.get_all_messages_from_ticket(ticket_id=ticket.id)
    if len(messages) == 1:
        await message.answer('üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –í–∞–º –æ—Ç–≤–µ—Ç—è—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è! ü´∂')


@router_user.message(F.text.startswith('@'), StateFilter(PeopleSearch.waiting_for_username))
async def get_username(message: Message, state: FSMContext) -> None:
    logger.info(f'Current state: {await state.get_state()}, Data: {await state.get_data()}')
    if message.text is None:
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ @username')
        return
    try:
        username = message.text.lstrip('@').strip()
        if not username:
            await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ @username')
            return

        logger.info(f'Username was entered: {username}')

        user = await req_user.get_user_by_username(username=username)
        if not user:
            await message.answer('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω')
            return

        logger.info(f'Found user: {user}')

        await show_user_profile(message=message, tg_id=user.tg_id, state=state, username=user.username)

    except Exception as e:
        logger.error(f'Error in get_username handler: {e}')
        await message.answer('‚ùå –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')


@router_user.message(F.text == 'üéâ –ù–∞—á–Ω—ë–º üéâ')
async def get_year(message: Message, state: FSMContext) -> None:
    logger.info(f'Current state: {await state.get_state()}, Data: {await state.get_data()}')
    if not message.from_user:
        return

    await start_events_list(user_id=message.from_user.id, message=message, state=state)


@router_user.message(UserData.year)
async def get_status(message: Message, state: FSMContext) -> None:
    logger.info(f'Current state: {await state.get_state()}, Data: {await state.get_data()}')
    if message.text is None or message.text.isalpha():
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Ü–∏—Ñ—Ä–∞–º–∏')
        return

    if not message.text.isdigit() and not message.text.isnumeric():
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Ü–∏—Ñ—Ä–∞–º–∏')
        return

    age = int(message.text)

    if age < 18 or age > 60:
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 18 –¥–æ 60 –ª–µ—Ç')
        return

    data = await state.update_data(year=age)
    if not data.get('year'):
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç', show_alert=True)
        return
    await state.set_state(UserData.gender)

    if isinstance(message, Message):
        await message.answer(
            """
<b>–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:</b>
            """,
            reply_markup=await kb.gender_kb(state=state),
            parse_mode='html',
        )


@router_user.message(UserData.profession)
async def get_profession(message: Message, state: FSMContext) -> None:
    logger.info(f'Current state: {await state.get_state()}, Data: {await state.get_data()}')
    if message.text is None or message.text.isdigit():
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç')
        return

    data = await state.update_data(profession=message.text)
    if not data.get('profession'):
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é', show_alert=True)
        return

    await state.set_state(UserData.about)

    if isinstance(message, Message):
        await message.answer(
            """
–ù–∞–ø–∏—à–∏ –æ —Å–µ–±–µ, —á–µ–º —É–≤–ª–µ–∫–∞–µ—à—å—Å—è, –∫–∞–∫–∏–µ –µ—Å—Ç—å —Ö–æ–±–±–∏ –∏ –≤–æ–æ–±—â–µ, —á—Ç–æ –ª—é–±–∏—à—å –¥–µ–ª–∞—Ç—å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?
            """,
            parse_mode='html',
        )


@router_user.message(UserData.about)
async def get_about(message: Message, state: FSMContext) -> None:
    if message.text is None:
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç')
        return

    data = await state.update_data(about=message.text)
    if not data.get('about'):
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ', show_alert=True)
        return

    await state.set_state(UserData.interests)

    if isinstance(message, Message):
        await message.answer(
            """
<b>–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:</b>
            """,
            reply_markup=await kb.interests_kb(state=state),
            parse_mode='html',
        )


@router_user.message(F.text == '–ß–∞—Ç')
async def show_chats(message: Message) -> None:
    await message.answer(
        '<b>‚ûñ‚ûñ  –ú–µ–Ω—é —á–∞—Ç–æ–≤ ‚ûñ‚ûñ</b>',
        reply_markup=await kb.get_chats_kb(),
        parse_mode='html',
    )


@router_user.message(F.text == '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
async def show_events(message: Message) -> None:
    await message.answer(
        '<b>‚ûñ‚ûñ  –ú–µ–Ω—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π  ‚ûñ‚ûñ</b>',
        reply_markup=await kb.get_events_kb(),
        parse_mode='html',
    )


@router_user.message(F.text == '–†–µ–∑–∏–¥–µ–Ω—Ç—ã')
async def show_residents_menu(message: Message) -> None:
    await message.answer(
        '<b>‚ûñ‚ûñ  –ú–µ–Ω—é —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤  ‚ûñ‚ûñ</b>',
        reply_markup=await kb.get_residents_menu_kb(),
        parse_mode='html',
    )


@router_user.message(F.text == '–ë–∞–ª–ª—ã')
async def show_points_user(message: Message) -> None:
    if message.from_user is None:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')
        return
    points = await req_user.get_user_points(message.from_user.id)

    if isinstance(message, Message):
        await message.answer(
            f"""
–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {points} –±–∞–ª–ª–æ–≤! üéâ

–ö–∞–∂–¥—ã–π –±–∞–ª–ª ‚Äî —ç—Ç–æ —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏! –ö–æ–ø–∏ –±–æ–ª—å—à–µ –∏ –æ–ø–ª–∞—á–∏–≤–∞–π –¥–æ 50% —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ª—é–±–æ–≥–æ –±–∏–ª–µ—Ç–∞ –≤ Weekender.

–°–æ–≤–µ—Ç: –∞–∫—Ç–∏–≤–Ω–∏—á–∞–π –≤ —á–∞—Ç–µ @weekender_chat, –∑–æ–≤–∏ –¥—Ä—É–∑–µ–π –∏ –¥–µ–ª–∏—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ ‚Äî –±–∞–ª–ª—ã —Å–∞–º–∏ –ø—Ä–∏–±–µ–≥—É—Ç –∫ —Ç–µ–±–µ! üöÄ

–î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –±–∞–ª–ª–æ–≤ –Ω–∞–ø–∏—à–∏ –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @weekender_main
            """
        )

    load_dotenv()
    file_id = os.getenv('POINTS_IMAGE_ID')
    if file_id is None:
        raise ValueError('error file_id')

    if isinstance(message, Message):
        try:
            await message.answer_photo(
                file_id,
            )

            await message.answer(
                """
    üéØ –ú–µ—Ö–∞–Ω–∏–∫–∞ –æ–±–º–µ–Ω–∞ –±–∞–ª–ª–æ–≤
1. 1 –±–∞–ª–ª = 1 —Ä—É–±.
2. –ë–∞–ª–ª–∞–º–∏ –º–æ–∂–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –¥–æ 50% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è;
3. –ë–∞–ª–ª—ã —Å–≥–æ—Ä–∞—é—Ç —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞.
                """,
                parse_mode='html',
            )

        except Exception as e:
            logger.error(f'Error in show_points_user: {e}', exc_info=True)
            await message.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
