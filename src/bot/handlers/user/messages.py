import logging

from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

import src.bot.db.repositories.event_repository as req_event
import src.bot.db.repositories.user_repository as req_user
import src.bot.keyboards.builders as kb

from src.bot.fsm.user_states import UserData
from src.bot.utils.helpers import send_events_list


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router_user = Router()


@router_user.message(F.photo)
async def photo(message: Message) -> None:
    try:
        if not message.photo:
            await message.answer('‚ùå —Ñ–æ—Ç–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!')
            return
        file_id_s = message.photo[-1].file_id
        await message.answer_photo(
            file_id_s,
            caption='–í–æ—Ç —Ç–≤–æ—è —Ñ–æ—Ç–∫–∞',
        )
        await message.answer(f'id —Ñ–æ—Ç–∫–∏: {file_id_s}')
    except Exception as e:
        logger.error(f'Error in photo handler: {e}')
        await message.answer('‚ùå –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')


@router_user.message(F.text.in_(['üéâ –ù–∞—á–Ω—ë–º üéâ', 'üîÄ–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É']))
async def get_year(message: Message, state: FSMContext) -> None:
    if message.from_user is None or message.from_user.id is None:
        return
    user_data = await req_user.get_user_data(message.from_user.id)

    await state.set_data(
        {
            'year': user_data.get('year'),
            'gender': user_data.get('gender'),
            'status': user_data.get('status'),
            'district': user_data.get('district'),
            'interests': user_data.get('interests', []),
            'shown_events': user_data.get('shown_events', []),
        }
    )

    await state.update_data(shown_events=[])
    await state.set_state(UserData.year)
    await message.answer(
        """
<b>–î–∞–≤–∞–π —á—É—Ç—å –±–ª–∏–∂–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è.</b>
–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? 
–≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø–æ–¥–∫–∏–Ω—É—Ç—å —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã.
        """,
        parse_mode='html',
    )


@router_user.message(UserData.year)
async def get_status(message: Message, state: FSMContext) -> None:
    if message.text is None or message.text.isalpha():
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Ü–∏—Ñ—Ä–∞–º–∏')
        return

    if not message.text.isdigit() and not message.text.isnumeric():
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Ü–∏—Ñ—Ä–∞–º–∏')
        return

    age = int(message.text)

    if age < 18 or age > 60:
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 18 –¥–æ 60 –ª–µ—Ç')
        return

    data = await state.update_data(year=age)
    if not data.get('year'):
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç', show_alert=True)
        return
    await state.set_state(UserData.gender)

    if isinstance(message, Message):
        await message.answer(
            """
<b>–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –ø–æ–ª:</b>
            """,
            reply_markup=await kb.gender_kb(state=state),
            parse_mode='html',
        )


@router_user.message(F.text == '–ú–µ–Ω—é üóÑÔ∏è')
async def question(message: Message) -> None:
    await message.answer(
        '<b>‚ûñ‚ûñ –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ûñ‚ûñ</b>',
        reply_markup=await kb.get_menu_kb(),
        parse_mode='html',
    )


@router_user.message(F.text == 'üîÑÔ∏è–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É')
async def repeat_recommendations(message: Message, state: FSMContext, bot: Bot) -> None:
    if message.from_user is None:
        return
    data = await state.get_data()
    shown_events = data.get('shown_events', [])  # –°–ø–∏—Å–æ–∫ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö ID
    logger.info(f'Shown events: {shown_events}')

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∏—Å–∫–ª—é—á–∞—è –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ
        events = await req_event.get_recommended_events_new(
            tg_id=message.from_user.id, limit=3, exclude_ids=shown_events
        )

        if not events:
            await message.answer("""
            ‚ú® –í—ã —É–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!
        –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –∑–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ. ‚ú®
            """)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö ID
        new_shown_events = shown_events + [event.id for event in events]
        await state.update_data(shown_events=new_shown_events)
        logger.info(f'Updated shown events: {new_shown_events}')

        await send_events_list(message, events, bot)
    except Exception as e:
        logger.error(f'Error in repeat_recommendations: {e}', exc_info=True)
        await message.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
