import asyncio
import logging

from typing import Optional, Union

from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Filter
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    InputMediaAudio,
    InputMediaDocument,
    InputMediaPhoto,
    InputMediaVideo,
    MaybeInaccessibleMessage,
    Message,
)

import src.bot.db.repositories.admin_repository as req_admin
import src.bot.db.repositories.event_repository as req_event
import src.bot.db.repositories.user_repository as req_user
import src.bot.keyboards.builders as kb

from src.bot.fsm.user_states import UserData


InputMediaType = Union[
    InputMediaPhoto,
    InputMediaVideo,
    InputMediaAudio,
    InputMediaDocument,
]


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
class AdminFilter(Filter):
    async def __call__(self, message: Message) -> bool:
        if message.from_user is not None:
            return await req_admin.is_admin(message.from_user.id)
        return False


# –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
async def data_get_update(callback: CallbackQuery, state: FSMContext, key: str) -> tuple[str, Optional[str]] | None:
    if callback.data is None:
        await callback.answer('‚ùå –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')
        return None

    value = callback.data.split('_')[1]
    data = await state.get_data()

    current_value = data.get(key)
    new_value = None if current_value == value else value

    return value, new_value


# –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def safe_delete_message(message: MaybeInaccessibleMessage) -> bool:
    if not isinstance(message, Message):
        logger.info('Message is not a Message object')
        return False
    try:
        await message.delete()
        logger.info(f'Deleted message: {message.message_id}, chat_id: {message.chat.id}')
        return True
    except TelegramBadRequest as e:
        error_message = str(e).lower()

        if 'message to delete not found' in error_message:
            logger.info(f'Message {message.message_id} already deleted')
            return True
        elif 'message is not modified' in error_message:
            logger.info(f'Message {message.message_id} has not changes')
            return True
        elif 'reply markup not modified' in error_message:
            try:
                await message.edit_reply_markup(reply_markup=None)
                return True
            except Exception as e:
                logger.info(f'Failed to delete message: {e}')
                return False
        else:
            logger.info(f'Failed to delete message {message.message_id}: {error_message}')
            return False


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
async def send_events_list(
    callback: CallbackQuery,
    events: list,
    bot: Bot,
) -> None:
    if not callback.message or not isinstance(callback.message, Message):
        logger.error('callback.message is None')
        return

    chat_id = callback.message.chat.id
    logger.info(f'chat_id: {chat_id}')

    async def show_typing() -> None:
        await bot.send_chat_action(chat_id=chat_id, action='typing')

    if not events:
        await show_typing()
        await asyncio.sleep(2)
        await callback.message.answer(
            """
‚è≥ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ú—ã —Å–æ–æ–±—â–∏–º, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ!

–ê –ø–æ–∫–∞ –º–æ–∂–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É @weekender_chat –∏ –ø–æ–∑–≤–∞—Ç—å —Ç—É–¥–∞ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π üíú
            """
        )
        await callback.answer()
        return

    for event in events:
        await show_typing()
        await asyncio.sleep(2)
        event_message = f'{event.description if event.description else ""}\n\n{event.url}'

        await callback.message.answer(event_message)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
def is_age_in_range(user_age: int, event_age_range: str) -> bool:
    if not event_age_range:
        return False

    try:
        if '-' in event_age_range:
            min_age, max_age = map(int, event_age_range.split('-'))
            return min_age <= user_age <= max_age
        elif event_age_range.endswith('+'):
            return user_age >= int(event_age_range[:-1])
        else:
            return int(event_age_range) == user_age
    except (ValueError, AttributeError):
        logger.error(f'Invalid age range format: {event_age_range}')
        return False


# –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è handlers message –∏ callback_query
async def start_events_list(user_id: int, message: Message, state: FSMContext) -> None:
    if not user_id:
        return

    user_data = await req_event.get_user_data(user_id)

    await state.set_data(
        {
            'year': user_data.get('year'),
            'gender': user_data.get('gender'),
            'status': user_data.get('status'),
            'target': user_data.get('target'),
            'district': user_data.get('district'),
            'profession': user_data.get('profession'),
            'about': user_data.get('about'),
            'interests': user_data.get('interests', []),
            'shown_events': user_data.get('shown_events', []),
        }
    )

    await state.update_data(shown_events=[])
    await state.set_state(UserData.year)
    await message.answer(
        """
<b>–ê —Ç–µ–ø–µ—Ä—å —á—É—Ç—å –±–ª–∏–∂–µ –∫ –¥–µ–ª—É üòâ</b>
–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?
üëÄ –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ —Å–æ–±—ã—Ç–∏—è –∏ –ª—é–¥–µ–π –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–≤–æ–µ–≥–æ –≤–∞–π–±–∞.
        """,
        parse_mode='html',
    )


# –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
async def show_profile_with_photos(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"""
    if not callback.from_user or not callback.message or not isinstance(callback.message, Message):
        return

    try:
        user_data = await req_user.get_user_data(callback.from_user.id)
        photo_ids = await req_user.get_user_photo(callback.from_user.id)

        if photo_ids:
            media_group: list[InputMediaType] = [InputMediaPhoto(media=photo_id) for photo_id in photo_ids[:10]]
            await callback.message.answer_media_group(media=media_group)
        else:
            await callback.message.answer('–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–æ—Ñ–∏–ª—è')

        profile_text = f"""
    üë§ <b>{user_data.get('first_name', '–Ω–µ —É–∫–∞–∑–∞–Ω')}</b>

üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {user_data.get('year', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
‚ôÇÔ∏è <b>–ü–æ–ª:</b> {user_data.get('gender', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
üíç <b>–°—Ç–∞—Ç—É—Å:</b> {user_data.get('status', '–Ω–µ —É–∫–∞–∑–∞–Ω')}(–∞)
üéØ <b>–¶–µ–ª—å:</b> {user_data.get('target', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}
üèô <b>–†–∞–π–æ–Ω:</b> {user_data.get('district', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
üíº <b>–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:</b> {user_data.get('profession', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}
‚ù§Ô∏è <b>–ò–Ω—Ç–µ—Ä–µ—Å—ã:</b> {', '.join(user_data.get('interests', [])) or '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
üìÑ <b>–û —Å–µ–±–µ:</b> {user_data.get('about', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
    """

        await callback.message.answer(profile_text, parse_mode='html')
        await callback.answer()

    except Exception as e:
        logger.error(f'Error in get_profile handler: {e}')
        await callback.answer('‚ùå –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')


async def show_people_results(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π"""
    if not callback.from_user or not callback.data or not callback.message or not isinstance(callback.message, Message):
        return

    data = await state.get_data()
    shown_ids = data.get('shown_people_ids', [])
    age_ranges = data.get('age_ranges', [])

    try:
        # –ò—â–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await req_user.find_compatible_users(
            tg_id=callback.from_user.id, age_ranges=age_ranges, limit=7, exclude_ids=shown_ids
        )

        if not users:
            await callback.message.answer('üòî –ë–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ª—é–¥–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É')
            await state.clear()
            await state.update_data(shown_people_ids=[])
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user in users:
            await show_user_profile(callback.message, user.tg_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö ID
        new_shown_ids = shown_ids + [user.tg_id for user in users]
        await state.update_data(shown_people_ids=new_shown_ids)

        await callback.message.answer(
            '–•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –±–æ–ª—å—à–µ?',
            reply_markup=await kb.show_more_people_kb(),
        )

    except Exception as e:
        logger.error(f'Error in show_people_results: {e}', exc_info=True)
        await callback.message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')


async def show_user_profile(message: Message, tg_id: int, username: str | None = None) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ñ–æ—Ç–æ"""
    if not message or not isinstance(message, Message):
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await req_user.get_user_data(tg_id)
        if not user_data:
            await message.answer('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        photo_ids = await req_user.get_user_photo(tg_id)

        try:
            if photo_ids:
                media_group: list[InputMediaType] = [InputMediaPhoto(media=photo_id) for photo_id in photo_ids[:10]]
                await message.answer_media_group(media=media_group)
            else:
                await message.answer('–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–æ—Ñ–∏–ª—è')
        except Exception as media_error:
            logger.error(f'Failed to send media for user {tg_id}: {media_error}')
            await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è')

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç None
        interests = user_data.get('interests', [])
        if interests is None:  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
            interests = []

        profile_text = f"""
    üë§ <b>{user_data.get('first_name', '–Ω–µ —É–∫–∞–∑–∞–Ω')}</b>

üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {user_data.get('year', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
‚ôÇÔ∏è <b>–ü–æ–ª:</b> {user_data.get('gender', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
üíç <b>–°—Ç–∞—Ç—É—Å:</b> {user_data.get('status', '–Ω–µ —É–∫–∞–∑–∞–Ω')}(–∞)
üéØ <b>–¶–µ–ª—å:</b> {user_data.get('target', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}
üèô <b>–†–∞–π–æ–Ω:</b> {user_data.get('district', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
üíº <b>–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:</b> {user_data.get('profession', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}
‚ù§Ô∏è <b>–ò–Ω—Ç–µ—Ä–µ—Å—ã:</b> {', '.join(user_data.get('interests', [])) or '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
üìÑ <b>–û —Å–µ–±–µ:</b> {user_data.get('about', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
    """

        user_name = user_data.get('username')
        try:
            if user_name:
                await message.answer(
                    profile_text,
                    reply_markup=await kb.send_message_user_kb(tg_id=tg_id, username=user_name),
                    parse_mode='html',
                )
            else:
                await message.answer(
                    profile_text,
                    parse_mode='html',
                )
        except Exception as text_error:
            logger.error(f'Failed to send text for user {tg_id}: {text_error}')
            await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è')

    except Exception as e:
        logger.error(f'Error showing user profile {tg_id}: {e}')
