---
name: Deploy Bot

on:
  push:
    branches: [main]

if: "!contains(github.event.head_commit.message, '[skip ci]') || !contains(github.event.head_commit.message, '[no deploy]')"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: ruff
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Ruff linter
        run: ruff check .

  types:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: mypy
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install types-pytz
      - name: Run Mypy
        run: mypy --ignore-missing-imports --exclude migrations .

  deploy:
    runs-on: ubuntu-latest
    needs: [lint, types]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Verify SSH connection
        run: |
          ssh -o BatchMode=yes \
              -p ${{ secrets.SSH_PORT }} \
              -i ~/.ssh/id_ed25519 \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "echo 'SSH connection successful'" || {
            echo "::error::SSH connection failed"
            echo "Debug info:"
            echo "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç SSH_PRIVATE_KEY –≤ Secrets"
            echo "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ ~/.ssh/authorized_keys –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
            echo "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: sudo tail -f /var/log/auth.log"
            exit 1
          }

      - name: Deploy application
        run: |
          ssh -T -p ${{ secrets.SSH_PORT }} \
              -i ~/.ssh/id_ed25519 \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -euo pipefail

          # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
          export BOT_TOKEN='${{ secrets.BOT_TOKEN }}'
          export POSTGRES_USER='${{ secrets.POSTGRES_USER }}'
          export POSTGRES_PASSWORD='${{ secrets.POSTGRES_PASSWORD }}'
          export POSTGRES_DB='${{ secrets.POSTGRES_DB }}'
          export DATABASE_URL="postgresql+asyncpg://$POSTGRES_USER:$POSTGRES_PASSWORD@db:5432/$POSTGRES_DB"

          echo "üöÄ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–µ–ø–ª–æ—è..."
          cd ~/weekender_bot || { echo "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞"; exit 1; }

          # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞
          echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
          git fetch --all
          git reset --hard origin/main

          # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env
          echo "‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞..."
          [ -f .env ] || touch .env
          grep -v -e "BOT_TOKEN=" -e "POSTGRES_.*=" -e "DATABASE_URL=" .env > .env.tmp || true
          mv .env.tmp .env

          echo "BOT_TOKEN=$BOT_TOKEN" >> .env
          echo "POSTGRES_DB=$POSTGRES_DB" >> .env
          echo "POSTGRES_USER=$POSTGRES_USER" >> .env
          echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> .env
          echo "DATABASE_URL=$DATABASE_URL" >> .env

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π
          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π..."
          if [ ! -f alembic.ini ] || [ ! -d migrations ]; then
            echo "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π!"
            exit 1
          fi

          # –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫
          echo "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å–∞ –±–æ—Ç–∞..."
          docker-compose build --no-cache bot
          docker-compose up -d --force-recreate bot

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
          echo "üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –±–æ—Ç–∞..."
          docker-compose exec bot sh -c "\
            [ -f /app/alembic.ini ] || { echo '‚ùå alembic.ini –Ω–µ –Ω–∞–π–¥–µ–Ω'; exit 1; } && \
            [ -d /app/migrations ] || { echo '‚ùå –ü–∞–ø–∫–∞ migrations –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'; exit 1; } && \
            [ -f /app/migrations/env.py ] || { echo '‚ùå env.py –Ω–µ –Ω–∞–π–¥–µ–Ω'; exit 1; }"

          # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
          echo "üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..."
          docker-compose exec bot sh -c "
            cd /app && \
            if ! alembic current &>/dev/null; then \
              echo '‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ –≤–µ—Ä—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...'; \
              alembic stamp head || { echo '‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏'; exit 1; }; \
            fi && \
            echo '‚ÑπÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...'; \
            alembic upgrade head || { echo '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π'; exit 1; }" 2>&1 | tee alembic.log

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
          echo "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–π..."
          docker-compose exec db psql -U $POSTGRES_USER -d $POSTGRES_DB -c "SELECT * FROM alembic_version" || {
            echo "‚ùå –¢–∞–±–ª–∏—Ü–∞ –≤–µ—Ä—Å–∏–π –Ω–µ —Å–æ–∑–¥–∞–Ω–∞! –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞..."
            docker-compose exec bot alembic stamp head || {
              echo "‚ùå‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤–µ—Ä—Å–∏–π";
              exit 1;
            }
          }

          # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
          docker-compose ps
          docker-compose logs --tail=20

          echo "üéâ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
          EOF
