---
name: Deploy Bot

on:
  push:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: ruff
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Ruff linter
        run: ruff check .

  types:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: mypy
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install types-pytz
      - name: Run Mypy
        run: mypy --ignore-missing-imports --exclude migrations .

  deploy:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]') || !contains(github.event.head_commit.message, '[no deploy]')"
    needs: [lint, types]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Verify SSH connection
        run: |
          ssh -o BatchMode=yes \
              -p ${{ secrets.SSH_PORT }} \
              -i ~/.ssh/id_ed25519 \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "echo 'SSH connection successful'" || {
            echo "::error::SSH connection failed"
            echo "Debug info:"
            echo "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç SSH_PRIVATE_KEY –≤ Secrets"
            echo "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ ~/.ssh/authorized_keys –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
            echo "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: sudo tail -f /var/log/auth.log"
            exit 1
          }

      - name: Deploy application
        run: |
          ssh -T -p ${{ secrets.SSH_PORT }} \
              -i ~/.ssh/id_ed25519 \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -euo pipefail

          # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
          export BOT_TOKEN='${{ secrets.BOT_TOKEN }}'
          export POSTGRES_USER='${{ secrets.POSTGRES_USER }}'
          export POSTGRES_PASSWORD='${{ secrets.POSTGRES_PASSWORD }}'
          export POSTGRES_DB='${{ secrets.POSTGRES_DB }}'
          export DATABASE_URL="postgresql+asyncpg://$POSTGRES_USER:$POSTGRES_PASSWORD@db:5432/$POSTGRES_DB"

          echo "üöÄ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–µ–ø–ª–æ—è..."
          cd ~/weekender_bot || { echo "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞"; exit 1; }

          # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞
          echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
          git fetch --all
          git reset --hard origin/main

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è
          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
          if [ ! -f .env ]; then
            echo "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä."
            exit 1
          fi

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π (—Ç–æ–ª—å–∫–æ –∏—Ö –Ω–∞–ª–∏—á–∏–µ)
          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π..."
          if [ ! -f alembic.ini ] || [ ! -d migrations ]; then
            echo "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –¥–µ–ø–ª–æ—è"
          fi

          # –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫
          echo "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å–∞ –±–æ—Ç–∞..."
          docker-compose build --no-cache bot
          docker-compose up -d --force-recreate bot

          # –ù–∞–¥–µ–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã alembic_version
          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã alembic_version..."
          if ! docker-compose exec db sh -c 'PGPASSWORD=$POSTGRES_PASSWORD psql -h db -U $POSTGRES_USER -d $POSTGRES_DB -c "SELECT 1 FROM alembic_version LIMIT 1"' &>/dev/null; then
            echo "‚öôÔ∏è –¢–∞–±–ª–∏—Ü–∞ –≤–µ—Ä—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º..."
            docker-compose exec bot alembic stamp head || {
              echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤–µ—Ä—Å–∏–π"
              exit 1
            }
          fi

          # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–π
          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π..."
          MIGRATION_NEEDED=$(docker-compose exec bot sh -c "cd /app && alembic current | grep -c '(head)'" | tr -d '[:space:]')

          if [ "$MIGRATION_NEEDED" -eq 0 ]; then
            echo "‚ÑπÔ∏è –ù–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å..."

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            echo "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π..."
            if ! docker-compose exec bot sh -c "cd /app && alembic current &>/dev/null"; then
              echo "‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤–µ—Ä—Å–∏–π..."
              docker-compose exec bot sh -c "cd /app && alembic stamp head" || {
                echo "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π"
                exit 1
              }
            fi

            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
            echo "üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..."
            docker-compose exec bot sh -c "cd /app && alembic upgrade head" || {
              echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"
              exit 1
            }
          else
            echo "‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥"
          fi

          # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
          docker-compose ps
          docker-compose logs --tail=20 bot

          echo "üéâ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
          EOF
