---
name: Deploy Bot
on:
  push:
    branches: [main]
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: ruff
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Ruff linter
        run: ruff check .
  types:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: mypy
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install types-pytz
      - name: Run Mypy
        run: mypy --ignore-missing-imports --exclude migrations .
  deploy:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]') || !contains(github.event.head_commit.message,\
      \ '[no deploy]')"
    needs: [lint, types]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
      - name: Verify SSH connection
        run: |
          ssh -o BatchMode=yes \
              -p ${{ secrets.SSH_PORT }} \
              -i ~/.ssh/id_ed25519 \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "echo 'SSH connection successful'" || {
            echo "::error::SSH connection failed"
            echo "Debug info:"
            echo "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç SSH_PRIVATE_KEY –≤ Secrets"
            echo "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ ~/.ssh/authorized_keys –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
            echo "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: sudo tail -f /var/log/auth.log"
            exit 1
          }
      - name: Deploy application
        run: |
          ssh -T -p ${{ secrets.SSH_PORT }} \
              -i ~/.ssh/id_ed25519 \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -euo pipefail

          # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
          export BOT_TOKEN='${{ secrets.BOT_TOKEN }}'
          export POSTGRES_USER='${{ secrets.POSTGRES_USER }}'
          export POSTGRES_PASSWORD='${{ secrets.POSTGRES_PASSWORD }}'
          export POSTGRES_DB='${{ secrets.POSTGRES_DB }}'
          export DATABASE_URL="postgresql+asyncpg://$POSTGRES_USER:$POSTGRES_PASSWORD@db:5432/$POSTGRES_DB"

          # –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–µ–ø–ª–æ—è
          echo "üöÄ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–µ–ø–ª–æ—è..."
          cd ~/weekender_bot || { echo "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞"; exit 1; }

          # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞
          echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
          git fetch --all
          git reset --hard origin/main

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤..."
          [ -f .env ] || { echo "‚ùå .env –Ω–µ –Ω–∞–π–¥–µ–Ω"; exit 1; }
          [ -f alembic.ini ] || echo "‚ö†Ô∏è alembic.ini –Ω–µ –Ω–∞–π–¥–µ–Ω"
          [ -d migrations ] || echo "‚ö†Ô∏è –ü–∞–ø–∫–∞ migrations –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

          # –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫
          echo "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞..."
          docker-compose build --no-cache bot
          docker-compose up -d --force-recreate bot

          # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
          echo "üîç –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
          docker-compose ps
          echo "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –±–æ—Ç–∞:"
          docker-compose logs --tail=20 bot
          echo "üéâ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
          exit 0
          EOF
